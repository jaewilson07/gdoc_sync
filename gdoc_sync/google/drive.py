# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/google/02_drive.ipynb.

# %% auto 0
__all__ = ['GDoc_File', 'GDocFile_DownloadError']

# %% ../../nbs/google/02_drive.ipynb 2
import os

from dataclasses import dataclass, field
from typing import List

import datetime as dt


from googleapiclient.errors import HttpError

from gdoc_sync.client import get_date, generate_file_name, upsert_folder
import gdoc_sync.google.auth as ga
import gdoc_sync.google.converter as gc

from nbdev.showdoc import patch_to

# %% ../../nbs/google/02_drive.ipynb 4
@dataclass
class GDoc_File:
    doc_id: str
    doc_name: str
    modified_time: dt.datetime
    url: str

    auth: ga.GoogleAuth = field(repr=False)
    mime_str: str

    mime_type: gc.GoogleDrive_MimeType_Enum = None
    download_factory: dict = None

    parent_ls: List[str] = field(default=None)
    parent_gdocs: List = field(default=None, repr=False)

    service: ga.Resource = field(default=None, repr=False)
    creds: ga.Credentials = field(default=None, repr=False)

    content = None

    def __post_init__(self):
        self.creds = self.auth.creds
        self.service = self.auth.service or self.auth.generate_service(
            service_name="drive", service_version="v3"
        )

        try:
            self.mime_type = gc.GoogleDrive_MimeType_Enum(self.mime_str).name

        except Exception as e:
            print(e)

        if self.parent_ls:
            self.parent_gdocs = [
                GDoc_File.get_from_id(document_id=parent, auth=self.auth)
                for parent in self.parent_ls
            ]

    @classmethod
    def _from_json(cls, obj: dict, auth: ga.GoogleAuth, parent_ls: [str] = None):
        return cls(
            mime_str=obj["mimeType"],
            url=obj["webViewLink"],
            doc_id=obj["id"],
            doc_name=obj["name"],
            modified_time=get_date(obj["modifiedTime"]),
            parent_ls=parent_ls or obj.get("parents", None),
            auth=auth,
        )

# %% ../../nbs/google/02_drive.ipynb 9
class GDocFile_DownloadError(Exception):
    def __init__(self, doc_url):
        message = f"failure to download content for {doc_url}"
        super().__init__(message)

# %% ../../nbs/google/02_drive.ipynb 10
@patch_to(GDoc_File)
def get_content(self: GDoc_File):
    service = self.service or self.auth.service
    self.download_factory = gc.download_factory.get(
        self.mime_type, gc.download_factory["default"]
    )

    loop = 0

    while loop < 3 and self.content is None:
        try:
            loop += 1
            self.content = (
                service.files()
                .export(
                    fileId=self.doc_id,
                    mimeType=self.download_factory["export_type"].value,
                )
                .execute()
            )

        except HttpError as err:
            print(err)

        except Exception as e:
            print(e)

    if not self.content:
        raise GDocFile_DownloadError(self.webViewLink)

    return self.content

# %% ../../nbs/google/02_drive.ipynb 12
@patch_to(GDoc_File)
def download_file(
    self: GDoc_File, output_folder: str = "", is_use_file_id: bool = False
):
    if not self.content:
        self.get_content()

    # create output_folder
    clean_file_name = (
        self.doc_id if is_use_file_id else generate_file_name(self.doc_name)
    )

    output_folder_path = os.path.join(output_folder, clean_file_name)
    upsert_folder(output_folder_path)

    return self.download_factory["download_fn"](self.content, output_folder_path)
