# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/google/01_drive_converter.ipynb.

# %% auto 0
__all__ = ['download_factory', 'GoogleDrive_MimeType_Enum']

# %% ../../nbs/google/01_drive_converter.ipynb 3
import os

from enum import Enum

from bs4 import BeautifulSoup
from markdownify import MarkdownConverter

import zipfile
import io
from PIL import Image

import pptx2md

import gdoc_sync.google.auth as ga
from gdoc_sync.client import upsert_folder

# %% ../../nbs/google/01_drive_converter.ipynb 4
class GoogleDrive_MimeType_Enum(Enum):
    """for translating Google Drive types into 'exports as'"""

    docx = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    pptx = "application/vnd.openxmlformats-officedocument.presentationml.presentation"

    odt = "application/vnd.oasis.opendocument.text"
    rtf = "application/rtf"
    pdf = "application/pdf"
    txt = "text/plain"
    # html = 'application/zip'
    zip_file = "application/zip"
    epub = "application/epub+zip"

    folder = "application/vnd.google-apps.folder"
    gdoc = "application/vnd.google-apps.document"
    gsheet = "application/vnd.google-apps.spreadsheet"
    gshortcut = "application/vnd.google-apps.shortcut"
    gslides = "application/vnd.google-apps.presentation"

    # 'tex'  = 'application/zip'
    # 'html.zip'= 'application/zip'

# %% ../../nbs/google/01_drive_converter.ipynb 7
def clean_bs4(html):
    soup = BeautifulSoup(html, "html.parser")
    return soup.find("body")


class ImageBlockConverter(MarkdownConverter):
    """
    Create a custom MarkdownConverter that adds two newlines after an image
    """

    def convert_img(self, el, text, convert_as_inline, is_resize: bool = True):
        """
        custom image downloader for ImabeBlockConverter
        will handle resize
        """

        if is_resize:
            style_obj = {
                (obj.split(":")[0].strip()): obj.split(":")[1].strip()
                for obj in el.get("style").split(";")
                if ":" in obj
            }

            file_path = os.path.join(
                os.path.dirname(self.options["file_path"]), el["src"]
            )

            image = Image.open(file_path)

            width = style_obj["width"].replace("px", "")
            width = int(float(width))

            height = style_obj["height"].replace("px", "")
            height = int(float(height))

            new_image = image.resize((width, height))
            new_image.save(file_path)

        return super().convert_img(el, text, convert_as_inline)


def md(html, **options):
    """Create shorthand method for handling conversion"""
    return ImageBlockConverter(**options).convert(html)


def convert_file_in_place(file_path):
    """converts html file to markdown in place"""

    with open(file_path, encoding="utf-8") as f:
        html = f.read()

    markdown_content = md(
        str(html),
        keep_inline_images_in=["td", "span"],
        file_path=file_path,
        is_resize=True,
    )

    md_path = file_path.replace(".html", ".md")

    with open(md_path, "w+", encoding="utf-8") as f:
        f.write(markdown_content)

    return


def download_zip(content, output_folder):
    """save content to a zip file then convert html to markdown"""

    zip = zipfile.ZipFile(io.BytesIO(content), "r")
    zip.extractall(output_folder)

    file_ls = os.listdir(output_folder)

    # rename the html file to index.html
    for file_name in file_ls:
        if file_name.endswith(".html"):
            output_index = os.path.join(output_folder, "index.html")
            os.replace(os.path.join(output_folder, file_name), output_index)
            convert_file_in_place(os.path.join(output_folder, "index.html"))

    return f"successfully downloaded zip to {output_folder}"

# %% ../../nbs/google/01_drive_converter.ipynb 11
def download_pptx(content, output_folder):
    upsert_folder(output_folder)

    output_ppt_index = os.path.join(output_folder, "index.pptx")

    with open(output_ppt_index, "wb+") as binary_file:
        # Write bytes to file
        binary_file.write(content)

    pptx2md.convert(
        output_ppt_index,
        output=os.path.join(output_folder, "index.md"),
        image_dir=os.path.join(output_folder, "images"),
    )

    return f"successfully downloaded content to {output_folder}"

# %% ../../nbs/google/01_drive_converter.ipynb 14
download_factory = {
    "application/vnd.google-apps.presentation": {
        "download_fn": download_pptx,
        "export_type": GoogleDrive_MimeType_Enum.pptx,
    },
    "default": {
        "download_fn": download_zip,
        "export_type": GoogleDrive_MimeType_Enum.zip_file,
    },
}
