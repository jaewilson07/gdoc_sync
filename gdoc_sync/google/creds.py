# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_creds.ipynb.

# %% auto 0
__all__ = ['creds', 'GoogleCreds', 'get_creds_from_file', 'generate_creds_object']

# %% ../../nbs/00_creds.ipynb 4
import os
from dataclasses import dataclass, field
from typing import List

from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow

# %% ../../nbs/00_creds.ipynb 11
@dataclass
class GoogleCreds:
    """Google Credentials"""

    creds: Credentials

    scope : List[str] = field(default_factory= lambda: [
        "https://www.googleapis.com/auth/drive",
        "https://www.googleapis.com/auth/drive.file",
        "https://www.googleapis.com/auth/drive.metadata.readonly",
        "https://www.googleapis.com/auth/drive.readonly",
    ])

    def __post_init__(self):
        self.creds = self._test_is_expired()

    @classmethod
    def from_json(cls, credentials_file_json : str, # path to credentials json file
                scope : List[str] = None): # google.oauth2.credentials.Credentials
        """Get credentials from json file"""

        scope = scope or cls.scope

        creds = Credentials.from_authorized_user_info(credentials_file_json, scope )
        return cls(creds)

    @classmethod
    def from_client_id_and_secret(cls, client_id : str, client_secret : str, refresh_token : str, scope : List[str] = None):
        creds = Credentials(
            None,
            refresh_token= refresh_token,
            token_uri='https://oauth2.googleapis.com/token',
            client_id= client_id,
            client_secret= client_secret
        )

        return cls(creds)


    @classmethod
    def from_file(cls, credentials_file_path : str, # path to token json file
        scope : List[str] = None): # google.oauth2.credentials.Credentials
    
        """Get credentials from file path"""

        scope = scope or cls.scope
    
        creds = Credentials.from_authorized_user_file(credentials_file_path, scopes= scope)
        return cls(creds)

    def _test_is_expired(self):
        if self.creds.expired and self.creds.refresh_token:
            self.creds.refresh(Request())

        elif self.creds.expired and not self.creds.refresh_token:
            flow = InstalledAppFlow.from_client_secrets_file(self.credentials_file_json, scopes=self.scopes)
            creds = flow.run_local_server(port=0)
        return creds

# %% ../../nbs/00_creds.ipynb 13
def get_creds_from_file(token_file_path="env_token.json", credentials_file_path="env_creds.json"):
    """generate creds here, https://console.cloud.google.com/apis/credentials/oauthclient/214272795931-8l2hleihje6d14a0ltali43dpu26jjob.apps.googleusercontent.com?authuser=2&project=plated-ensign-355620
    for a new implementation you'll need to
    1. set up a project at console.cloud.google.com,
    2. enable (turn on) the appropriate APIs for that project
    3. configure OAuth access (your python script will use an Oauth token to authenticate, so your project needs the OAuth screen)
    4. download the creds file and store it as env_creds.json
    """

    # If modifying these scopes, delete the file token.json.
    SCOPES = [
        "https://www.googleapis.com/auth/drive",
        "https://www.googleapis.com/auth/drive.file",
        "https://www.googleapis.com/auth/drive.metadata.readonly",
        "https://www.googleapis.com/auth/drive.readonly",
    ]

    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if token_file_path and os.path.exists(token_file_path):
        creds = Credentials.from_authorized_user_file(token_file_path, SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            # if creds token can be refreshed, do it.
            creds.refresh(Request())
        else:
            # If there are no (valid) credentials available, run the Oauth flow
            flow = InstalledAppFlow.from_client_secrets_file(
                credentials_file_path, SCOPES
            )
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_file_path, "w") as token:
            token.write(creds.to_json())
    return creds


creds = get_creds()

# %% ../../nbs/00_creds.ipynb 16
def generate_creds_object(
        token_file_path: str = None,
        token_info: dict = None,
        client_secret_path: str = None,
        client_secret_info: dict = None):
    """generate creds object from token file"""
    
    creds = None

    if token_file_path:
        creds = Credentials.from_authorized_user_file(token_file_path)

    if token_info:
        creds = Credentials.from_authorized_user_info(token_info)

    if creds and creds.valid:
        return creds

    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
        return creds

    # If there are no (valid) credentials available, let the user log in.
    return generate_token_from_oauth_with_client_info(token_file_path=token_file_path or 'env_token.json',
                                                      client_secret_path=client_secret_path,
                                                      client_secret_info=client_secret_info)

