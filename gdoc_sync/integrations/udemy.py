# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/projects/posts/sg_3_qanda/redundant_filter_retriever.ipynb.

# %% auto 0
__all__ = ['RedundantFilterRetriever']

# %% ../../nbs/projects/posts/sg_3_qanda/redundant_filter_retriever.ipynb 0
from langchain.embeddings.base import Embeddings
from langchain.vectorstores import Chroma
from langchain.schema import BaseRetriever

# %% ../../nbs/projects/posts/sg_3_qanda/redundant_filter_retriever.ipynb 2
class RedundantFilterRetriever(BaseRetriever):
    embeddings: Embeddings
    chroma: Chroma

    def get_relevant_documents(self, query, lambda_multiplier=0.8):
        # calculate embeddings for 'query' string

        emb = self.embeddings.embed_query(query)

        # take embeddings and feed into max_marginal_relevance_search_by_vector
        return self.chroma.max_marginal_relevance_search_by_vector(
            embedding=emb, lambda_multiplier=lambda_multiplier
        )
        return []

    async def aget_relevant_documents(self):
        return []
