# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/projects/posts/sg_4_sql/tools.ipynb.

# %% auto 0
__all__ = ['run_sqlite_query', 'list_tables', 'describe_tables']

# %% ../../../nbs/projects/posts/sg_4_sql/tools.ipynb 1
import sqlite3
from typing import Any, List
from langchain.agents import tool, Tool

# %% ../../../nbs/projects/posts/sg_4_sql/tools.ipynb 2
conn = sqlite3.connect("db.sqlite")

# %% ../../../nbs/projects/posts/sg_4_sql/tools.ipynb 3
@tool
def run_sqlite_query(query: str) -> Any:  # query result
    """executes a sqlite query"""
    c = conn.cursor()
    try:
        c.execute(query)
        return c.fetchall()

    except sqlite3.OperationalError as e:
        return f"the following error occured {str(e)}"

# %% ../../../nbs/projects/posts/sg_4_sql/tools.ipynb 5
def list_tables() -> List[str]:  # returns a list of table names
    """retrieves a list of tables from the sqlite database"""

    rows = []
    c = conn.cursor()
    c.execute("SELECT name from sqlite_master WHERE type = 'table';")
    rows += c.fetchall()

    return "\n".join(row[0] for row in rows if row[0] is not None)

# %% ../../../nbs/projects/posts/sg_4_sql/tools.ipynb 7
@tool
def describe_tables(table_names: str):  # comma separated list of table_names
    """given a list of tablenames, returns the schema of those tables"""
    if "," in table_names:
        table_names = table_names.split(",")

    elif isinstance(table_names, list):
        table_names = table_names

    elif isinstance(table_names, str):
        table_names = [table_names]

    tables = ",".join("'" + table + "'" for table in table_names)
    sql = f"SELECT sql from sqlite_master WHERE type ='table' and name in ({tables});"

    c = conn.cursor()
    rows = c.execute(sql)
    return "\n".join(row[0] for row in rows if row[0] is not None)
