# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/asana/02_task.ipynb.

# %% ../../nbs/asana/02_task.ipynb 2
from __future__ import annotations

from dotenv import load_dotenv
import os
import json
from dataclasses import dataclass, field
from typing import List
import datetime as dt
from dateutil.parser import parse as dtu_parse
from mdutils.mdutils import MdUtils

from nbdev.showdoc import patch_to, show_doc

import gdoc_sync.utils as ut
import gdoc_sync.client as gd
import gdoc_sync.asana.auth as aa
import gdoc_sync.asana.user as au
import gdoc_sync.asana.project as ap

# %% auto 0
__all__ = ['AsanaSection', 'AsanaMembership', 'AsanaTask', 'AsanaStory']

# %% ../../nbs/asana/02_task.ipynb 4
@dataclass
class AsanaSection:
    id: str
    name: str
    resource_type: str
    auth: aa.AsanaAuth = field(repr=False)

    @classmethod
    def _from_json(cls, data: dict, auth=auth) -> "AsanaSection":
        return cls(
            id=data.get("gid"),
            name=data.get("name"),
            resource_type=data.get("resource_type"),
            auth=auth,
        )


@dataclass
class AsanaMembership:
    """relates a section to a project"""

    project: ap.AsanaProject
    section: AsanaSection
    auth: aa.AsanaAuth = field(repr=False)

    @classmethod
    def _from_json(cls, data: dict, auth: aa.AsanaAuth) -> "AsanaMembership":
        project = (
            ap.AsanaProject._from_json(data["project"], auth=auth)
            if data.get("project")
            else None
        )
        section = (
            AsanaSection._from_json(data["section"], auth=auth)
            if data.get("section")
            else None
        )
        return cls(project=project, section=section, auth=auth)

    def to_text(self):
        return f"{self.project.name} -> {self.section.name}"


@dataclass
class AsanaTask:
    id: str
    name: str
    workspace_id: str

    auth: aa.AsanaAuth = field(repr=False)
    assignee: au.AsanaUser = None

    assignee_status: str = None

    is_completed: bool = None

    created_at: dt.DateTime = None
    completed_on: dt.DateTime = None
    due_on: dt.DateTime = None
    modified_at: dt.DateTime = None

    memberships: List[dict] = None

    notes: str = None

    parent: Optional[dict] = None
    permalink_url: str = None
    projects: List[AsanaProject] = None
    stories: List[AsanaStory] = None

    tags: List[dict] = None

    @classmethod
    def _from_json(cls, obj: dict, auth: AsanaAuth) -> AsanaTask:
        assignee = (
            au.AsanaUser._from_json(obj.get("assignee"), auth=auth)
            if obj.get("assignee")
            else None
        )

        projects = [
            ap.AsanaProject._from_json(project, auth=auth)
            for project in obj.get("projects", [])
        ]

        memberships = [
            AsanaMembership._from_json(member_obj, auth=auth)
            for member_obj in obj.get("memberships", [])
        ]
        return cls(
            id=obj.get("gid"),
            name=obj.get("name"),
            auth=auth,
            workspace_id=obj.get("workspace", {}).get("gid"),
            assignee=assignee,
            is_completed=obj.get("completed"),
            assignee_status=obj.get("assignee_status"),
            completed_on=ut.get_date(obj.get("completed_at")),
            created_at=ut.get_date(obj.get("created_at")),
            due_on=ut.get_date(obj.get("due_on")),
            modified_at=ut.get_date(obj.get("modified_at")),
            memberships=memberships,
            notes=obj.get("notes"),
            parent=obj.get("parent"),
            permalink_url=obj.get("permalink_url"),
            tags=obj.get("tags", []),
            projects=projects,
        )

# %% ../../nbs/asana/02_task.ipynb 5
@patch_to(ap.AsanaProject)
async def get_tasks(
    self: ap.AsanaProject, debug_api: bool = False, return_raw: bool = False
):
    import gdoc_sync.asana.task as at

    auth = self.auth
    params = {"project": self.id}

    url = f"{auth.base_url}/tasks"

    res = await gd.get_data(
        auth=auth, method="GET", url=url, debug_api=debug_api, params=params
    )

    if return_raw:
        return res

    return [
        at.AsanaTask._from_json(task_obj, auth=auth)
        for task_obj in res.response["data"]
    ]

# %% ../../nbs/asana/02_task.ipynb 7
@patch_to(AsanaTask, cls_method=True)
async def get_by_id(
    cls, auth, task_id, debug_api: bool = False, return_raw: bool = False
):
    url = f"{auth.base_url}/tasks/{task_id}"

    res = await gd.get_data(
        auth=auth,
        method="GET",
        url=url,
        debug_api=debug_api,
    )

    if return_raw:
        return res

    return cls._from_json(res.response["data"], auth=auth)

# %% ../../nbs/asana/02_task.ipynb 9
@dataclass
class AsanaStory:
    id: str
    created_at: dt.DateTime
    created_by: au.AsanaUser
    text: str
    type: str
    resource_subtype: str

    auth: AsanaAuth = field(repr=False)

    @classmethod
    def _from_json(cls, data: dict, auth: AsanaAuth) -> AsanaStory:
        created_by = (
            au.AsanaUser._from_json(data["created_by"], auth=auth)
            if data.get("created_by")
            else None
        )

        return cls(
            id=data.get("gid"),
            created_at=ut.get_date(data.get("created_at")),
            created_by=created_by,
            text=data.get("text"),
            type=data.get("type"),
            resource_subtype=data.get("resource_subtype"),
            auth=auth,
        )

    def to_text(self):
        return f"{self.created_at.date()} - {self.created_by.name} - {self.text}"

# %% ../../nbs/asana/02_task.ipynb 10
@patch_to(AsanaTask)
async def get_stories(
    self,
    debug_api: bool = False,
    return_raw: bool = False,
    is_only_comments: bool = False,  # stories include any changes to the task, comments are a subtype of stories
):
    auth = self.auth

    url = f"{auth.base_url}/tasks/{self.id}/stories"

    res = await gd.get_data(
        auth=self.auth,
        method="GET",
        url=url,
        debug_api=debug_api,
    )

    if return_raw:
        return res

    self.stories = [
        AsanaStory._from_json(story_obj, auth=auth)
        for story_obj in res.response["data"]
    ]

    if is_only_comments:
        self.stories = [
            story for story in self.stories if "comment" in story.resource_subtype
        ]

    return self.stories

# %% ../../nbs/asana/02_task.ipynb 13
@patch_to(AsanaTask)
def to_md(self, output_folder="markdown", output_file=None):
    if not os.path.exists(output_folder):
        os.mkdir(output_folder)

    def treat_field(key, value, mdFile):
        if isinstance(value, au.AsanaUser):
            mdFile.new_line(f"{key} - {value.name}")
            return

        if isinstance(value, dt.datetime):
            mdFile.new_line(f"{key} - {value.date()}")
            return

        if key == "memberships":
            mdFile.new_header(level=1, title=key)
            [mdFile.new_line(asana_class.to_text()) for asana_class in value]

            return

        if key == "stories":
            mdFile.new_header(level=1, title=key)
            [
                mdFile.new_line(asana_class.to_text())
                for asana_class in value
                if "comment" in asana_class.resource_subtype
            ]

            return

        if key in ["name", "projects"] or not value:
            return

        return mdFile.new_line(f"{key} - {value}")

    mdFile = MdUtils(
        file_name=f"{output_folder}/{output_file or self.id}",
        title=output_file or self.name,
    )

    [
        treat_field(key, getattr(self, key), mdFile)
        for key in self.__dict__.keys()
        if key not in ["auth", "workspace_id"]
    ]
    mdFile.create_md_file()

    return f"done exporting {mdFile.file_name}"
    # mdFile.new_table(columns=3, rows=6, text=list_of_strings, text_align='center')
