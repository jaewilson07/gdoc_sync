# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/asana/01_project.ipynb.

# %% ../../nbs/asana/01_project.ipynb 2
from __future__ import annotations

from dotenv import load_dotenv
import os
import json
from dataclasses import dataclass, field
from typing import List
import datetime as dt
from dateutil.parser import parse as dtu_parse
from mdutils.mdutils import MdUtils

from nbdev.showdoc import patch_to

import gdoc_sync.utils as ut
import gdoc_sync.client as gd
import gdoc_sync.asana.auth as aa
import gdoc_sync.asana.user as au

# %% auto 0
__all__ = ["AsanaProject", "AsanaSection", "AsanaMembership"]


# %% ../../nbs/asana/01_project.ipynb 4
@dataclass
class AsanaProject:
    id: str
    name: str
    workspace_id: str
    permalink_url: str
    auth: aa.AsanaAuth = field(repr=False)

    is_archived: bool
    is_completed: bool

    created_date: dt.datetime
    modified_date: dt.datetime

    owner: au.AsanaUser
    members: List[au.AsanaUser]

    due_date: dt.datetime = None
    completed_date: dt.datetime = None

    tasks: List[AsanaTask] = None

    @classmethod
    def _from_json(cls, obj, auth: aa.AsanaAuth):
        owner = (
            au.AsanaUser._from_json(obj.get("owner"), auth=auth)
            if obj.get("owner")
            else None
        )

        members = (
            [
                au.AsanaUser._from_json(member, auth=auth)
                for member in obj.get("members", [])
            ]
            if obj.get("members")
            else None
        )

        created_date = ut.get_date(obj.get("created_at"))
        modified_date = ut.get_date(obj.get("modified_at"))
        due_date = ut.get_date(obj.get("due_on"))
        completed_date = ut.get_date(obj.get("completed_at"))

        return cls(
            auth=auth,
            id=obj.get("gid"),
            name=obj.get("name"),
            workspace_id=obj.get("workspace", {}).get("gid"),
            permalink_url=obj.get("permalink_url"),
            is_archived=obj.get("archived"),
            is_completed=obj.get("completed"),
            created_date=created_date,
            modified_date=modified_date,
            owner=owner,
            members=members,
            due_date=due_date,
            completed_date=completed_date,
        )


# %% ../../nbs/asana/01_project.ipynb 5
@dataclass
class AsanaSection:
    id: str
    name: str
    resource_type: str
    auth: aa.AsanaAuth = field(repr=False)

    @classmethod
    def _from_json(cls, data: dict, auth: aa.AsanaAuth) -> "AsanaSection":
        return cls(
            id=data.get("gid"),
            name=data.get("name"),
            resource_type=data.get("resource_type"),
            auth=auth,
        )


@dataclass
class AsanaMembership:
    project: AsanaProject
    section: AsanaSection
    auth: aa.AsanaAuth = field(repr=False)

    @classmethod
    def _from_json(cls, data: dict, auth: aa.AsanaAuth) -> "AsanaMembership":
        project = (
            AsanaProject._from_json(data["project"], auth=auth)
            if data.get("project")
            else None
        )
        section = (
            AsanaSection._from_json(data["section"], auth=auth)
            if data.get("section")
            else None
        )
        return cls(project=project, section=section, auth=auth)

    def to_text(self):
        return f"{self.project.name} -> {self.section.name}"


# %% ../../nbs/asana/01_project.ipynb 6
@patch_to(AsanaProject, cls_method=True)
async def get_projects(
    cls: AsanaProject,
    auth: AsanaAuth,
    debug_api: bool = False,
    return_raw: bool = False,
):
    url = f"{auth.base_url}/projects"

    res = await gd.get_data(
        auth=auth,
        method="GET",
        url=url,
        debug_api=debug_api,
    )
    if return_raw:
        return res

    return [
        AsanaProject._from_json(proj_obj, auth=auth)
        for proj_obj in res.response["data"]
    ]


# %% ../../nbs/asana/01_project.ipynb 9
@patch_to(AsanaProject, cls_method=True)
async def get_by_id(
    cls: AsanaProject,
    auth: AsanaAuth,
    project_id,
    debug_api: bool = False,
    return_raw: bool = False,
):
    url = f"{auth.base_url}/projects/{project_id}"

    res = await gd.get_data(
        auth=auth,
        method="GET",
        url=url,
        debug_api=debug_api,
    )

    if return_raw:
        return res

    return cls._from_json(res.response["data"], auth=auth)
