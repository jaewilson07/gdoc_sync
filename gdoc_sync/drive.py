# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_drive.ipynb.

# %% auto 0
__all__ = ['GoogleDrive_MimeType_Enum']

# %% ../nbs/01_drive.ipynb 2
from nbdev.showdoc import *
from enum import Enum
import datetime as dt
from dataclasses import dataclass

from googleapiclient.discovery import build



# %% ../nbs/01_drive.ipynb 3
class GoogleDrive_MimeType_Enum(Enum):
    """for translating Google Drive types into 'exports as'"""
    
    docx  = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    pptx = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
    
    odt  = 'application/vnd.oasis.opendocument.text'
    rtf = 'application/rtf'
    pdf = 'application/pdf'
    txt = 'text/plain'
    # html = 'application/zip'
    zip = 'application/zip'
    epub  = 'application/epub+zip'
    
    folder = 'application/vnd.google-apps.folder'
    gdoc = 'application/vnd.google-apps.document'   
    gsheet ='application/vnd.google-apps.spreadsheet'
    gshortcut = 'application/vnd.google-apps.shortcut'
    gslides = 'application/vnd.google-apps.presentation'
    
    # 'tex'  = 'application/zip'
    # 'html.zip'= 'application/zip'

# %% ../nbs/01_drive.ipynb 7
def process_file(file_obj, folder_path):
    """gets the file type using GoogleDrive Enum, useful for processing & downloading a file"""

    file_obj.update({'folder_path': folder_path})

    file_type = "undefined_enum"
    try:
        file_type = GoogleDrive_MimeType_Enum(file_obj['mimeType']).name
    
    except Exception as e:
        print(e)
    
    finally:
        file_obj.update({'type': file_type})
        return file_obj


def get_files(folder_id, service):
    """retrieves files in a folder"""

    page_token = None
    file_ls = []

    while True:
        res = service.files().list(
            q=f"'{folder_id}' in parents",
            pageSize=10, fields="nextPageToken, files(id,webViewLink, name, mimeType,modifiedTime )",
            pageToken=page_token).execute()

        items = res.get('files', [])

        file_ls += items

        page_token = res.get('nextPageToken', None)

        if page_token is None:
            break

    return file_ls


def get_file_looper(folder_id, service, file_ls=None, folder_path=''):
    """recursive function to get files in a folder and map over files in subfolder"""

    if not file_ls:
        file_ls = []
        
    new_files = get_files(folder_id=folder_id, service=service)

    new_files = [process_file(file_obj, folder_path)for file_obj in new_files]

    file_ls += new_files

    if new_files:
        for file_obj in new_files:
            if file_obj['type'] == 'folder':

                sub_folder_path = os.path.join(folder_path, clean_url_name(convert_to_snake(file_obj.get('name'))))

                get_file_looper(folder_id=file_obj.get('id'),
                                folder_path=sub_folder_path,
                                service=service,
                                file_ls=file_ls)

    return file_ls



