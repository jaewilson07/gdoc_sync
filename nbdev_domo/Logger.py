# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/95_Logger.ipynb.

# %% auto 0
__all__ = ['Logger']

# %% ../nbs/95_Logger.ipynb 3
import aiohttp
import asyncio

from typing import Optional, List
from abc import ABC

import datetime as dt

from fastcore.basics import patch_to


# %% ../nbs/95_Logger.ipynb 4
class Logger:
    """log class with user customizeable output method"""

    app_name: str
    logs: List[dict]

    output_fn: Optional[callable] = None     # function to call with write_logs method.

    def __init__(
        self,
        app_name: str,
        output_fn: Optional[
            callable
        ] = None,  # function to call with write_logs method.
    ):

        self.app_name = app_name
        self.output_fn = output_fn
        self.logs = []

    def _AddLog(self, message: str, type_str: str, debug=False):
        """internal method to append message to log"""

        new_row = {
            "date_time": dt.datetime.now(),
            "application": self.app_name,
            "type": type_str,
            "message": message,
        }

        if debug:
            print(new_row)

        self.logs.append(new_row)
 

# %% ../nbs/95_Logger.ipynb 6
@patch_to(Logger)
def log_info(self, message, debug=False):
    """log an informational message"""
    self._AddLog(message=message, type_str="Info", debug=debug)

@patch_to(Logger)
def log_error(self, message, debug=False):
    """log an error message"""
    self._AddLog(message=message, type_str="Error", debug=debug)

@patch_to(Logger)
def log_warning(self, message, debug=False):
    """log a warning message"""
    self._AddLog(message=message, type_str="Warning", debug=debug)

# %% ../nbs/95_Logger.ipynb 8
@patch_to(Logger)
def output_log(self):
    """calls the user defined output function"""
    return self.output_fn(self.logs)
