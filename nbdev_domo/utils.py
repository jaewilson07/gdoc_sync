# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/99_Utils.ipynb.

# %% auto 0
__all__ = ['DictDot', 'convert_epoch_millisecond_to_datetime', 'convert_datetime_to_epoch_millisecond', 'convert_snake_to_pascal']

# %% ../nbs/99_Utils.ipynb 3
import datetime as dt

# %% ../nbs/99_Utils.ipynb 4
from types import SimpleNamespace


# %% ../nbs/99_Utils.ipynb 5
class DictDot(SimpleNamespace):
    """
    convenience class that converts dictionaries to objects with attributes that can be accessed with dot notation.
    """

    def __init__(self,
                 dictionary,
                 **kwargs):
        super().__init__(**kwargs)

        for key, value in dictionary.items():
            if isinstance(value, dict):
                self.__setattr__(key, DictDot(value))
            elif isinstance(value, list):
                new_list = []
                for item in value:
                    if isinstance(item, dict):
                        new_list.append(DictDot(item))
                    else:
                        new_list.append(item)
                self.__setattr__(key, new_list)
            else:
                self.__setattr__(key, value)

    def __getattr__(self, item):
        return None


# %% ../nbs/99_Utils.ipynb 10
def convert_epoch_millisecond_to_datetime(epoch: int):
    '''convert Epoch time with miliseconds to Date time'''
    return dt.datetime.fromtimestamp(epoch / 1000.0)


def convert_datetime_to_epoch_millisecond(datetime: dt.datetime):
    '''convert DateTime to Epoch time with Miliseconds'''
    return int(datetime.timestamp() * 1000)

# %% ../nbs/99_Utils.ipynb 12
def convert_snake_to_pascal(str):
    clean_str = str.replace("_", " ").title().replace(" ", "")
    return clean_str[0].lower()+clean_str[1:]

