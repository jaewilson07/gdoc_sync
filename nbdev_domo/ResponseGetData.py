# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/99_ResponseGetData.ipynb.

# %% auto 0
__all__ = ['ResponseGetData']

# %% ../nbs/99_ResponseGetData.ipynb 3
from dataclasses import dataclass, field
from fastcore.utils import patch_to
from fastcore.test import test_eq

import requests
import asyncio
import aiohttp
from typing import  Union


# %% ../nbs/99_ResponseGetData.ipynb 5
@dataclass
class ResponseGetData:
    """preferred response class for all API routes"""
    status: int
    response: Union[list, dict, str]
    is_success: bool
    auth: dict = field(default_factory=dict)

# %% ../nbs/99_ResponseGetData.ipynb 10
@patch_to(ResponseGetData, cls_method = True)
def _from_requests_response(cls, res : requests.Response #requests response object
                           ) -> ResponseGetData:
    """returns ResponseGetData"""
    
    #JSON responses
    if res.ok and "application/json" in res.headers.get("Content-Type", {}):
        return ResponseGetData(
            status = res.status_code, 
            response = res.json(),
            is_success=True
        )

    #default text responses
    elif res.ok:
        return ResponseGetData(
            status=res.status_code,
            response=res.text,
            is_success=True
        )
    
    # errors
    return ResponseGetData(
        status=res.status_code,
        response=res.reason,
        is_success=False
    )

# %% ../nbs/99_ResponseGetData.ipynb 15
@patch_to(ResponseGetData, cls_method = True)
async def _from_aiohttp_response(cls, res : aiohttp.ClientResponse #requests response object
                           ) -> ResponseGetData:
    
    """async method returns ResponseGetData"""
    
    if res.ok and "application/json" in res.headers.get("Content-Type", {}) :
        try:
            return ResponseGetData(
                status=res.status, response=await res.json(), is_success=True
            )

        # handle if unable to decode json()
        except asyncio.TimeoutError as e:
            print(e)
            print("response included json, but defaulted to backup decode method")

            return ResponseGetData(
                status=res.status, response=await res.json(content_type=None), is_success=True
            )

        # response is text
    elif res.ok:
        return ResponseGetData(
            status=res.status, response=await res.text(), is_success=True
        )

    # response is error
    else:
        return ResponseGetData(status=res.status, response=str(res.reason), is_success=False)
